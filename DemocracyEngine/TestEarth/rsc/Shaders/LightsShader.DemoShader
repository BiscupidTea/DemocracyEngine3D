#shader vertex
#version 410 core

layout(location = 0) in vec4 aPosition;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec4 aColor;
layout(location = 3) in vec2 aTexCoord;

out vec3 FragPos;
out vec3 normal;
out vec2 TexCoord;
out vec4 v_Color;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proyection;


void main()
{
	FragPos = vec3(model * aPosition);
	normal = mat3(transpose(inverse(model))) * aNormal;
	gl_Position = proyection * view * vec4(FragPos, 1.0);
	
	v_Color = aColor;
	TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}

#shader fragment
#version 410 core

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec4 v_Color;
in vec2 v_TexCoord;

uniform sampler2D u_Texture;

uniform float ambientStrength;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 objectColor;

void main()
{
	float ambientStrength = 0.1f;
	vec3 ambient = ambientStrength * lightColor;
	
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;
	
	vec4 texColor = texture(u_Texture, TexCoord);
	vec4 baseColor = texColor * v_Color;
	
	vec3 result = (ambient + diffuse) * objectColor;
	FragColor = vec4(result, 1.0);
}