#shader vertex
#version 410 core

layout(location = 0) in vec4 aPosition;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec4 aColor;
layout(location = 3) in vec2 aTexCoord;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoord;
out vec4 v_Color;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	FragPos = vec3(model * aPosition);
	Normal = mat3(transpose(inverse(model))) * aNormal;
	gl_Position = projection * view * vec4(FragPos, 1.0);

	v_Color = aColor;
	TexCoord = aTexCoord;
}

#shader fragment
#version 410 core

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec4 v_Color;
in vec2 TexCoord;

uniform sampler2D u_Texture;

uniform float ambientStrength;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform vec3 viewPos;

uniform float specularStrength;
uniform int shininess;

void main()
{
	vec3 ambient = ambientStrength * lightColor;

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
	vec3 specular = specularStrength * spec * lightColor;

	vec4 texColor = texture(u_Texture, TexCoord);
	vec4 baseColor = texColor * v_Color;

	vec3 result = (ambient + diffuse + specular) * baseColor.rgb * objectColor;
	FragColor = vec4(result, baseColor.a);
}