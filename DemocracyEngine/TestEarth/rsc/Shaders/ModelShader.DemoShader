#shader vertex
#version 410 core

layout(location = 0) in vec4 aPosition;
layout(location = 1) in vec3 aNormal;
layout(location = 2) in vec2 aTexCoord;

out vec3 FragPos;
out vec3 Normal;
out vec2 TexCoord;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
	FragPos = vec3(model * aPosition);
	Normal = mat3(transpose(inverse(model))) * aNormal;
	gl_Position = projection * view * vec4(FragPos, 1.0);
	
	TexCoord = aTexCoord;
}

#shader fragment
#version 410 core

out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoord;

uniform sampler2D u_Texture;
uniform vec3 viewPos;

struct Material
{
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
	float shininess;
};

uniform Material material;

const int MAX_DIR_LIGHTS = 1;
const int MAX_POINT_LIGHTS = 8;
const int MAX_SPOT_LIGHTS = 4;

struct DirLight {
	vec3 direction;
	vec3 color;
};
uniform int dirLightCount;
uniform DirLight dirLights[MAX_DIR_LIGHTS];

struct PointLight {
	vec3 position;
	vec3 color;

	float constant;
	float linear;
	float quadratic;

	float intensity;
};
uniform int pointLightCount;
uniform PointLight pointLights[MAX_POINT_LIGHTS];

struct SpotLight {
	vec3 position;
	vec3 direction;
	vec3 color;
	float cutOff;
	float outerCutOff;

	float constant;
	float linear;
	float quadratic;

	float intensity;
};
uniform int spotLightCount;
uniform SpotLight spotLights[MAX_SPOT_LIGHTS];

vec3 CalcDirectionalLight(DirLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	vec3 ambient = material.ambient * light.color;
	vec3 diffuse = material.diffuse * diff * light.color;
	vec3 specular = material.specular * spec * light.color;
	return ambient + diffuse + specular;
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

	vec3 ambient = material.ambient * light.color;
	vec3 diffuse = material.diffuse * diff * light.color;
	vec3 specular = material.specular * spec * light.color;

	vec3 result = (ambient + diffuse + specular) * attenuation * light.intensity;

	return result;
}

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(light.position - fragPos);
	float diff = max(dot(normal, lightDir), 0.0);
	vec3 reflectDir = reflect(-lightDir, normal);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

	float distance = length(light.position - fragPos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * distance * distance);

	float theta = dot(lightDir, normalize(-light.direction));
	float epsilon = light.cutOff - light.outerCutOff;
	float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

	vec3 ambient  = material.ambient * light.color;
	vec3 diffuse  = material.diffuse * diff * light.color;
	vec3 specular = material.specular * spec * light.color;

	vec3 result = (ambient + diffuse + specular) * attenuation * intensity * light.intensity;

	return result;
}

void main()
{
	vec3 norm = normalize(Normal);
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 result = vec3(0.0);

	for (int i = 0; i < dirLightCount; ++i)
	result += CalcDirectionalLight(dirLights[i], norm, viewDir);

	for (int i = 0; i < pointLightCount; ++i)
	result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);

	for (int i = 0; i < spotLightCount; ++i)
	result += CalcSpotLight(spotLights[i], norm, FragPos, viewDir);

	vec4 texColor = texture(u_Texture, TexCoord);
	vec4 baseColor = texColor;

	FragColor = vec4(result * baseColor.rgb, baseColor.a);
}